import os
import re
import threading
import time
from scapy.layers.inet import IP, ICMP
from scapy.sendrecv import sr1

ip_sur = []
# def url_sur_ip(host, d):  #网段存活ip
#     global ip_sur
#     try:  # 构造icmp协议
#         ip_addr = host + str(d)
#         ping = IP(dst=ip_addr) / ICMP()
#         res = sr1(ping, timeout=1, verbose=False)
#         ip_sur.append(res['IP'].src)
#     except:
#         pass

def url_sur_ip(host, d):  #网段存活ip
    global ip_sur
    ip_addr = host + str(d)
    linux_ping = f'ping -c 1 -W 1 {ip_addr}'
    res = os.popen(linux_ping).read()
    if '64 bytes' in res:
        ip_sur.append(ip_addr)
    # else:
    #     win_ping = f'ping -n 1 -w 1 {ip_addr}'
    #     res1 = os.popen(win_ping).read()
    #     if '字节=32' in res1:
    #         ip_sur.append(ip_addr)
    # print(ip_sur)


def ip_read_write():
    global ip_sur
    with open("../opt/内网IP结果.txt", 'w') as i:
        i.write("")    #清空原本
    with open("../opt/IP.txt", 'r') as fi:
        ip = fi.readline()
        agex = r"\d+\.\d+\.\d+\."
        host = re.findall(agex, ip)[0]  # 正则取出ip地址
        for d in range(1, 256):
            threading.Thread(target=url_sur_ip, args=(host, d)).start()
        time.sleep(1)
    with open("../opt/内网IP结果.txt", 'a') as f:
        for sur in ip_sur:
            f.write(sur+"\n")  #写入
        return True


# ip_read_write()
