'''

根据域名获取IP -> 获取开放端口 -> 获取子域名和后台信息 -> 获取指纹信息 -> 获取概况信息 -> 整理互相印证 -> 确定使用的框架和后台 -> 选择对应的CVE
 -> 尝试CVE -> 获取返回结果 -> 两个信息进行整合并写入

'''
import sys
import json
import os
sys.path.append('/opt/lampp/htdocs/Scan/')    #添加搜索路径


from etc.url获取概况信息 import url_ip
from etc.获取开放端口 import ip_port
from etc.子域名和后台爆破 import url_back
from etc.url指纹信息 import fing
from etc.url获取概况信息 import url_message
from cve.cve_frame.get_cve import get
from cve.cve_frame.post_cve import post


def jude_ip():
    with open('../opt/前端传url.txt','r') as file:
        url = file.readline()
        ip = url_ip(url)
        # print(ip)
        return ip    #获取IP
    

def jude_port():
    ip = jude_ip()
    port = ip_port(ip)
    # print(port)
    return port   #获取端口


def jude_subdom():
    subdom_list=[]
    jude = url_back()   
    if jude:  #判断是否运行完成
        with open('../opt/子域名结果.txt','r') as file:
            reads = file.readlines()
            for read in reads:
                 subdom_list.append(read.replace('\n','').replace('\'',''))
        # print(subdom_list)
        return subdom_list    #获取子域名


def jude_fing():
    list = []
    fings = fing()
    if fings:
        with open('../opt/指纹结果.json','r')as file:
            fingerprint = json.load(file)
            for key in fingerprint.keys():
                 list.append(key)
            return list,fingerprint     #获取使用的指纹信息
            
            
def jude_general():
    dict = {}
    with open('../opt/前端传url.txt','r') as file:
        url = file.readline()
    general = url_message(url)
    for k,v in general.items():
        if v != None:
            dict[k] = v
    # print(dict)
    return dict       #获取概况信息
        

def disposal_data():
    dic = {}
    ip = jude_ip()
    port = jude_port()
    subdom_list = jude_subdom()
    jude_frame,fingerprint = jude_fing()
    general = jude_general()
    dic['IP'] = ip
    dic['Port'] = port
    dic['subdom'] = subdom_list
    dic['jude_frame'] = jude_frame
    dic['fingerprint'] = fingerprint
    dic['general'] = general    #进行数据汇总
    with open('../opt/智能扫描.json','w') as file:
        json.dump(dic,indent=4,ensure_ascii=False,fp=file)   #按照json格式设置缩进和转义
    return True   


def jude_cve():
    # jude = disposal_data()
    # if jude:   #启用前面脚本准备数据
        path = []
        with open('../opt/智能扫描.json','r') as file:
            frame = json.load(file)['jude_frame']
        for root,conte,files in os.walk('../cve/cve_frame'):   #遍历下属目录
            # print(root)
            # print(conte)
            # print(files)
            for fram in frame:
                # print(fram)
                if fram in root:   #目录和指纹信息相同则进行后面拼接
                    path.append(root)
        return path    #各个框架进行汇总
                
     
def jude_cve_path():
    path = jude_cve()
    if path:
        # print(path)
        filename=[]
        filename_json = []
        for pi in path:
            for pa in os.walk(pi):
                for p in pa[2]:   #遍历子目录文件
                    if p.endswith(".py"):     #是否存在直接py
                        filename.append(pi + '/' + p)  #获取其中的py文件
                    elif p.endswith(".json"):
                        filename_json.append(pi + '/' + p)  #获取其中的json文件
        # print(filename)   
        # print(filename_json)   
        return filename,filename_json
    else:
        return False,False

def execu_cve():   
    filename,filename_json = jude_cve_path()
    if filename == False and filename_json == False:   #未找到对应的模块则进行
        with open('../opt/智能扫描.json','r') as f:
            read = json.load(f)
            # print(read)
        with open('../opt/结果.txt','w') as file:
            for k,v in read.items():
                file.write(f"{k}:{v}\n")
                f.write("\n")
            file.write("\n")
            file.write("\n")
            file.write("库中未发现对应CVE模块进行检测,可以尝试使用CVE扫描进行遍历扫描")
    else:    #剩下请况
        turn_out=[]
        get_json=[]
        post_json=[]
        for py in filename:
            res = os.popen(f"python3 {py}")  #执行pytho脚本
            a = res.read().replace('\n','')  #获取返回值
            turn_out.append(a)
        # print(turn_out)
        for filename_path in filename_json:
            # print(filename_path)
            get_res = get(filename_path)   #执行对应json的get请求
            post_res = post(filename_path)  #执行对应json的post请求
            get_json.append(get_res)
            post_json.append(post_res)
        # print(get_res)
        # print(post_res)
        # print(turn_out)
        # print(get_json,post_json)
        with open('../opt/智能扫描.json','r') as li:
            reads = json.load(li)
        with open('../opt/结果.txt','w') as f:
            for k,v in reads.items():
                f.write(f"{k}:{v}\n")
                f.write("\n")
            f.write("\n")
            f.write("\n")
            for get_follow in get_json:
                if get_follow != None:
                    f.write("GET请求:"+str(get_follow)+"\n")
            for post_follow in post_json:
                if post_follow != None:
                    f.write("POST请求:"+str(post_follow)+"\n")
            for t in turn_out:
                f.write("特殊请求:"+str(t)+"\n")


execu_cve()
